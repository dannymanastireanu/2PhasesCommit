apiVersion: apps/v1
kind: Deployment
metadata:
  name: coordinator
  labels:
    app: coordinator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coordinator
  template:
    metadata:
      labels:
        app: coordinator
    spec:
      containers:
      - name: coordinator
        image: acscontainerdny.azurecr.io/coordinator:v1
#        args: ["coordinator"]
#        ports:
#        - containerPort: 9999
      imagePullSecrets:
        - name: k8sdocker4

# Logs pods-container
# kubectl logs $(kubectl get pods -o=jsonpath='{.items[0].metadata.name}') coordinator

# Delete all pods/deployments
# kubectl delete pods --all --force && kubectl delete --all deployment

# Kubectl deployment
# kubectl apply -f ./k8s/coordinator-deployment.yaml

# Remove all docker images/containers
# docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) && docker rmi $(docker images -a -q) --force

# Login to registry
# az login
# az acr login --name acscontainerdny

# Push image to private registry
# docker tag  coordinator:latest acscontainerdny.azurecr.io/coordinator:v1
# docker push acscontainerdny.azurecr.io/coordinator:v1

# Create token for permissions, useed later in kubectl
#  az acr token create --name K8sToken4 --registry acscontainerdny \
#  --repository coordinator \
#  content/write content/read \
#  --output json

# Create secret based on previous created token
#  kubectl create secret docker-registry k8sdocker4 \
#  --namespace default \
#  --docker-server=acscontainerdny.azurecr.io \
#  --docker-username=K8sToken4 \
#  --docker-password="BmwhTpoLX/Ug1l6bkAIV9WocYf0v5Z1bioPRdjitdE+ACRBNN1P9"